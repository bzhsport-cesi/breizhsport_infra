- name: Provision Frontend VM
  hosts: all
  become: true

  vars:
    docker_packages:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin

  tasks:
    - name: Update only APT cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Remove any conflicting Docker packages
      ansible.builtin.apt:
        name:
          - docker.io
          - docker-doc
          - docker-compose
          - podman-docker
          - containerd
          - runc
        state: absent
      ignore_errors: yes

    - name: Install required dependencies
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - gnupg
          - lsb-release
          - nginx
          - python3-certbot-nginx
        state: present
        update_cache: yes

    - name: Add Docker GPG key
      ansible.builtin.shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
      args:
        creates: /usr/share/keyrings/docker-archive-keyring.gpg

    - name: Create Docker repo file
      ansible.builtin.shell: |
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
        $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list
      args:
        executable: /bin/bash

    - name: Update APT after Docker repo added
      ansible.builtin.apt:
        update_cache: yes

    - name: Install latest Docker & Compose packages
      ansible.builtin.apt:
        name: "{{ docker_packages }}"
        state: latest

    - name: Docker login GHCR
      community.docker.docker_login:
        registry_url: ghcr.io
        username: "{{ registry_username }}"
        password: "{{ registry_token }}"

    - name: Create app directory
      ansible.builtin.file:
        path: "/home/{{ ansible_user | default('ubuntu') }}/app"
        state: directory
        mode: "0755"

    - name: Deploy docker-compose.yml
      ansible.builtin.template:
        src: "/tmp/docker-compose.yml.j2"
        dest: "/home/{{ ansible_user | default('ubuntu') }}/app/docker-compose.yml"

    - name: Deploy nginx.conf
      ansible.builtin.template:
        src: "/tmp/nginx.conf.j2"
        dest: "/home/{{ ansible_user | default('ubuntu') }}/app/nginx.conf"

    - name: Launch Docker Compose
      community.docker.docker_compose_v2:
        project_src: "/home/{{ ansible_user | default('ubuntu') }}/app"
        state: present

    - name: Deploy nginx configuration
      ansible.builtin.template:
        src: "/tmp/nginx.conf.j2"
        dest: "/etc/nginx/sites-available/frontend"
      notify: Reload Nginx

    - name: Enable nginx frontend config
      ansible.builtin.file:
        src: /etc/nginx/sites-available/frontend
        dest: /etc/nginx/sites-enabled/frontend
        state: link
        force: true
      notify: Reload Nginx

    - name: Remove default nginx config
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: Reload Nginx

    - name: Obtain SSL certificate with Certbot
      ansible.builtin.shell: |
        certbot --nginx --non-interactive --agree-tos -d {{ frontend_domain }} -m {{ letsencrypt_email }}
      args:
        creates: "/etc/letsencrypt/live/{{ frontend_domain }}"

    - name: Afficher l'IP publique de la VM
      ansible.builtin.shell: "curl -s ifconfig.me"
      register: vm_ip

    - name: Print deployed frontend URL
      ansible.builtin.debug:
        msg: "Votre frontend est disponible : https://{{ frontend_domain }} (IP : {{ vm_ip.stdout }})"

  handlers:
    - name: Reload Nginx
      ansible.builtin.service:
        name: nginx
        state: reloaded